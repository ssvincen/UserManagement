/*
Deployment script for UserManagementDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "UserManagementDB"
:setvar DefaultFilePrefix "UserManagementDB"
:setvar DefaultDataPath "C:\Users\Sifiso Sikhakhane\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\mssqllocaldb\"
:setvar DefaultLogPath "C:\Users\Sifiso Sikhakhane\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\mssqllocaldb\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[Group]...';


GO
CREATE TABLE [dbo].[Group] (
    [Id]          INT           IDENTITY (1, 1) NOT NULL,
    [Name]        VARCHAR (100) NOT NULL,
    [Description] VARCHAR (MAX) NULL,
    [Active]      BIT           NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[GroupMenuPermission]...';


GO
CREATE TABLE [dbo].[GroupMenuPermission] (
    [Id]               BIGINT IDENTITY (1, 1) NOT NULL,
    [GroupId]          INT    NOT NULL,
    [NavigationMenuId] BIGINT NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[NavigationMenu]...';


GO
CREATE TABLE [dbo].[NavigationMenu] (
    [Id]             BIGINT         IDENTITY (1, 1) NOT NULL,
    [Name]           NVARCHAR (MAX) NULL,
    [ParentMenuId]   BIGINT         NULL,
    [Area]           NVARCHAR (MAX) NULL,
    [ControllerName] NVARCHAR (MAX) NULL,
    [ActionName]     NVARCHAR (MAX) NULL,
    [IsExternal]     BIT            NOT NULL,
    [ExternalUrl]    NVARCHAR (MAX) NULL,
    [DisplayOrder]   INT            NOT NULL,
    [Visible]        BIT            NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[UserGroup]...';


GO
CREATE TABLE [dbo].[UserGroup] (
    [Id]      BIGINT IDENTITY (1, 1) NOT NULL,
    [UserId]  BIGINT NOT NULL,
    [GroupId] INT    NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Users]...';


GO
CREATE TABLE [dbo].[Users] (
    [Id]              BIGINT        IDENTITY (1, 1) NOT NULL,
    [FirstName]       VARCHAR (50)  NOT NULL,
    [Surname]         VARCHAR (50)  NOT NULL,
    [EmailId]         VARCHAR (200) NOT NULL,
    [Password]        VARCHAR (250) NOT NULL,
    [EmailVerifyLink] VARCHAR (250) NULL,
    [IsEmailVerified] BIT           NOT NULL,
    [LastLogin]       DATETIME      NOT NULL,
    [DateCreated]     DATETIME      NOT NULL,
    [LastModified]    DATETIME      NOT NULL,
    [Active]          BIT           NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC),
    UNIQUE NONCLUSTERED ([EmailId] ASC)
);


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Group]...';


GO
ALTER TABLE [dbo].[Group]
    ADD DEFAULT (1) FOR [Active];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT (0) FOR [IsEmailVerified];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT (GETDATE()) FOR [LastLogin];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT (GETDATE()) FOR [DateCreated];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT (GETDATE()) FOR [LastModified];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT (1) FOR [Active];


GO
PRINT N'Creating Foreign Key [dbo].[FK_RoleMenuPermission_Group]...';


GO
ALTER TABLE [dbo].[GroupMenuPermission]
    ADD CONSTRAINT [FK_RoleMenuPermission_Group] FOREIGN KEY ([GroupId]) REFERENCES [dbo].[Group] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_RoleMenuPermission_NavigationMenu]...';


GO
ALTER TABLE [dbo].[GroupMenuPermission]
    ADD CONSTRAINT [FK_RoleMenuPermission_NavigationMenu] FOREIGN KEY ([NavigationMenuId]) REFERENCES [dbo].[NavigationMenu] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_NavigationMenu_NavigationMenu_ParentMenuId]...';


GO
ALTER TABLE [dbo].[NavigationMenu]
    ADD CONSTRAINT [FK_NavigationMenu_NavigationMenu_ParentMenuId] FOREIGN KEY ([ParentMenuId]) REFERENCES [dbo].[NavigationMenu] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_UserRoles_Users]...';


GO
ALTER TABLE [dbo].[UserGroup]
    ADD CONSTRAINT [FK_UserRoles_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[Users] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_UserRoles_Role]...';


GO
ALTER TABLE [dbo].[UserGroup]
    ADD CONSTRAINT [FK_UserRoles_Role] FOREIGN KEY ([GroupId]) REFERENCES [dbo].[Group] ([Id]);


GO
PRINT N'Creating Procedure [dbo].[spr_AddUser]...';


GO
CREATE PROCEDURE [dbo].[spr_AddUser]
	@FirstName NVARCHAR(150) , 
	@Surname NVARCHAR(150) ,
	@EmailAddress NVARCHAR(200) , 
	@PasswordHash NVARCHAR(MAX),
	@EmailOTP VARCHAR(250),
	@GroupId INT
	
AS
DECLARE @result BIT = 0, @newId BIGINT, @message VARCHAR(100) = '';
BEGIN
SET NOCOUNT ON;
IF NOT EXISTS (SELECT TOP 1 Id FROM dbo.[Users] WHERE EmailId = @EmailAddress)
	BEGIN
		DECLARE @UserId BIGINT
		INSERT INTO dbo.[Users](FirstName, Surname, EmailId, [Password], EmailVerifyLink)
		VALUES(@FirstName, @Surname, @EmailAddress, @PasswordHash, @EmailOTP)
		SET @newId = (SELECT SCOPE_IDENTITY());

		INSERT INTO dbo.[UserGroup](UserId, GroupId)
		VALUES(@newId, @GroupId)

		SET @result = 1;
		SET @message = 'Update Successfull';

	END
ELSE
	BEGIN
		SET @result = 0;
		SET @newId = (SELECT TOP 1 Id FROM dbo.[Users] WHERE EmailId = @EmailAddress);
		SET @message = 'Email Address already Exist';
	END
SELECT @result [Result], @message [Message], @newId [Id]
END
GO
PRINT N'Creating Procedure [dbo].[spr_CheckIfUserExistByEmailIdAndPasswordAndUpdateLastLogin]...';


GO
CREATE PROCEDURE [dbo].[spr_CheckIfUserExistByEmailIdAndPasswordAndUpdateLastLogin]
	@EmailId VARCHAR(200),
	@Password VARCHAR(250)
AS
DECLARE @result BIT = 0, @newId BIGINT, @message VARCHAR(100) = '';
IF EXISTS (SELECT TOP 1 Id FROM dbo.Users WHERE EmailId = @EmailId AND [Password] = @Password)
BEGIN
	SET NOCOUNT ON;

	UPDATE dbo.Users
	SET LastLogin = GETDATE()
	WHERE EmailId = @EmailId AND [Password] = @Password
 
	SET @result = 1;
	SET @newId = (SELECT TOP 1 Id FROM dbo.Users WHERE EmailId = @EmailId AND [Password] = @Password);
	SET @message = 'Update Successfull';
	END
ELSE
	BEGIN
		SET @result = 0; 
		SET @newId = 0;
		SET @message = 'Invalid Credentials';
	END 
SELECT @result [Result], @message [Message], @newId [Id]
GO
PRINT N'Creating Procedure [dbo].[spr_GetPermissionsByRoleId]...';


GO
CREATE PROCEDURE [dbo].[spr_GetPermissionsByRoleId]
	@GroupId INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	SELECT nm.Id,
	   nm.[Name],
	   nm.ParentMenuId,
	   nm.Area,
	   nm.ControllerName,
	   nm.ActionName,
	   nm.IsExternal,
	   NM.IsExternal,
	   nm.DisplayOrder,
	   nm.Visible
	FROM dbo.NavigationMenu nm INNER JOIN dbo.RoleMenuPermission mp
	ON nm.Id = mp.NavigationMenuId
	WHERE mp.GroupId = @GroupId
END
GO
PRINT N'Creating Procedure [dbo].[spr_GetMenuItem]...';


GO
CREATE PROCEDURE [dbo].[spr_GetMenuItem]
	@RoleId INT,
	@ControllerName NVARCHAR(MAX),
	@ActionName NVARCHAR(MAX)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.

	SET NOCOUNT ON;

	DECLARE @tempNavigationMenu TABLE 
	(
		[Id] BIGINT,
		[Name] NVARCHAR (MAX),
		[ParentMenuId] BIGINT,
		[Area] NVARCHAR(MAX),
		[ControllerName] NVARCHAR(MAX),
		[ActionName] NVARCHAR(MAX),
		[IsExternal] BIT,
		[ExternalUrl] NVARCHAR(MAX),
		[DisplayOrder] INT,
		[Visible] BIT
	)
	INSERT INTO @tempNavigationMenu
	EXEC spr_GetPermissionsByRoleId @RoleId

	SELECT *
	FROM @tempNavigationMenu
	WHERE ControllerName = @ControllerName 
	AND ActionName = @ActionName
END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
			   SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

CREATE TABLE #groupTable 
( 
	[Id] INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
	[Name] VARCHAR(100) NOT NULL,
	[Description] VARCHAR(MAX),
	[Active] BIT NOT NULL DEFAULT(1)
)

INSERT INTO #groupTable([Name])
VALUES ('Administrator'),
	   ('User')

INSERT INTO [dbo].[Group] ([Name])
SELECT [Name] FROM #groupTable
WHERE [Name] NOT IN (SELECT [Name] FROM [dbo].[Group] WITH (NOLOCK))
DROP TABLE #groupTable

CREATE TABLE #navigationMenuTable
(
	[Id] BIGINT ,
	[Name] NVARCHAR(MAX),
	[ParentMenuId] BIGINT,
	[Area] NVARCHAR(MAX),
	[ControllerName] NVARCHAR(MAX) ,
	[ActionName] NVARCHAR(MAX) ,
	[IsExternal] BIT ,
	[ExternalUrl] NVARCHAR(MAX),
	[DisplayOrder] INT ,
	[Visible] BIT 
)
INSERT INTO #navigationMenuTable([Id], [Name], [ParentMenuId], [Area], [ControllerName], [ActionName], [IsExternal], [ExternalUrl], [DisplayOrder], [Visible])
VALUES (1,'Operator', NULL, NULL, '', '', 0, NULL,1,1),
	   (2,'Maintain', NULL, NULL, '', '', 0, NULL,1,1),
	   (3,'Report', NULL, NULL, '', '', 0, NULL,1,1),
	   (4,'Create User', 1, NULL, 'Account', 'CreateUser', 0, NULL,1,1),
	   (5,'Create Group', 1, NULL, 'Account', 'CreateGroup', 0, NULL,2,1),
	   (6,'Link Group', 1, NULL, 'Account', 'LinkGroup', 0, NULL,3,1),
	   (7,'Link User', 1, NULL, 'Account', 'LinkUser', 0, NULL,4,1),
	   (8,'Users', 2, NULL, 'Account', 'Users', 0, NULL,1,1),
	   (9,'Edit User', 2, NULL, 'Account', 'EditUser', 0, NULL,4,0),
	   (10,'List Users', 3, NULL, 'Account', 'Users', 0, NULL,1,1)

INSERT INTO dbo.NavigationMenu([Name], [ParentMenuId], [Area], [ControllerName], [ActionName], [IsExternal], [ExternalUrl], [DisplayOrder], [Visible])
SELECT [Name], [ParentMenuId], [Area], [ControllerName], [ActionName], [IsExternal], [ExternalUrl], [DisplayOrder], [Visible] 
FROM #navigationMenuTable
WHERE [Name] NOT IN (SELECT [Name] FROM dbo.NavigationMenu)
DROP TABLE #navigationMenuTable

CREATE TABLE #groupMenuPermission
(
	[GroupId] INT NOT NULL,
	[NavigationMenuId] BIGINT NOT NULL,	
)

INSERT INTO #groupMenuPermission
VALUES (1, 1),
	   (1, 2),	   
	   (1, 3),
	   (1, 4),	
	   (1, 5),	   
	   (1, 6),	   
	   (1, 7),	  
	   (1, 8),	   
	   (1, 9),	   
	   (1, 10),	   
	   (2, 2),	   
	   (2, 3)
INSERT INTO dbo.GroupMenuPermission([GroupId], [NavigationMenuId])
SELECT [GroupId], [NavigationMenuId]
FROM #groupMenuPermission
WHERE [GroupId] NOT IN (SELECT [GroupId] FROM dbo.GroupMenuPermission)
AND [NavigationMenuId] NOT IN (SELECT [NavigationMenuId] FROM dbo.GroupMenuPermission)
DROP TABLE #groupMenuPermission
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
